# Execution Steps for Sign Language Translator Project

1. **Set Up the Environment**
   - Ensure Python 3.8 or higher is installed on your system.
   - Create a virtual environment (optional but recommended):
     ```
     python -m venv sign_lang_env
     source sign_lang_env/bin/activate  # On Windows: sign_lang_env\Scripts\activate
     ```
   - Install all required libraries and packages listed in the README.md file.

2. **Prepare the Dataset**
   - Download the American Sign Language dataset from Roboflow:
     - URL: https://universe.roboflow.com/project-et9mt/signlang-q5xad/dataset/1
     - Ensure the dataset is organized as specified in `data.yaml`:
       - Training images: `E:/sign/final/train/images`
       - Validation images: `E:/sign/final/train/images`
       - Test images: `E:/sign/final/test/images`
       - Classes: ['bye', 'hello', 'no', 'please', 'sorry', 'thankyou', 'yes']
   - Verify the dataset structure matches the paths in `data.yaml`.

3. **Generate Sign Videos**
   - Run the `generate_sign_videos.py` script to create videos for each sign:
     ```
     python generate_sign_videos.py
     ```
   - Ensure the output directory `E:\sign\final\sign_videos` exists and is writable.
   - The script uses the `cerspense/zeroscope_v2_576w` model to generate videos for each sign ('bye', 'hello', 'no', 'please', 'sorry', 'thankyou', 'yes') and saves them as `.mp4` files in the specified directory.
   - Verify that all videos are generated correctly and accessible at paths like `E:\sign\final\sign_videos\hello.mp4`.

4. **Train the YOLO Model (Optional)**
   - If not using the pre-trained model, train the YOLOv8 model using the dataset:
     ```
     yolo train model=yolov8n.pt data=data.yaml epochs=50 imgsz=640
     ```
   - The trained model weights will be saved in `runs/detect/train/weights/best.pt`.
   - Ensure the pre-trained model `best.pt` is available at `C:\Users\Md.Shafee\runs\detect\train\weights\best.pt` as specified in `app1.py`.

5. **Run the Streamlit Application**
   - Navigate to the project directory containing `app1.py`.
   - Run the Streamlit app with the specified command:
     ```
     streamlit run app1.py --server.fileWatcherType none
     ```
   - This command starts the Streamlit server and disables the file watcher to prevent reloading issues.
   - Open a web browser and go to `http://localhost:8501` (or the URL provided by Streamlit) to access the application.

6. **Use the Sign Language Translator**
   - **Sign to Text/Speech Mode**:
     - Click the "SIGN TO TEXT / SPEECH" button.
     - Click "Toggle Webcam" to start the webcam feed.
     - Perform one of the supported ASL signs ('bye', 'hello', 'no', 'please', 'sorry', 'thankyou', 'yes') in front of the webcam.
     - View detected signs in the "Transcribed Signs" text area.
     - Click "Convert to Speech" to hear the transcribed signs.
     - Check the sidebar for the latest detected sign’s name, image, and meaning.
   - **Speech to Sign Mode**:
     - Click the "SPEECH TO SIGN" button.
     - Select either "Text" or "Speech" input method.
     - For "Text": Enter words (e.g., "hello please thankyou") in the text input field.
     - For "Speech": Click "Record Speech" and speak the words.
     - Watch the corresponding sign videos play for valid words.
     - Check the sidebar for the latest sign’s name, image, and meaning.

7. **Test Real-Time Detection (Optional)**
   - Run the `real.py` script for standalone real-time sign detection:
     ```
     python real.py
     ```
   - This opens a window showing the webcam feed with bounding boxes and labels for detected signs.
   - Press 'q' to exit the detection window.

8. **Troubleshooting**
   - Ensure the webcam is connected and accessible.
   - Verify all video files exist in `E:\sign\final\sign_videos`.
   - Check that the YOLO model path in `app1.py` is correct.
   - If speech recognition fails, ensure PyAudio is installed and a microphone is available.
   - If videos fail to generate, check the `diffusers` library and model availability.

9. **Stop the Application**
   - Stop the Streamlit server by pressing `Ctrl+C` in the terminal.
   - For `real.py`, press 'q' in the detection window to exit.